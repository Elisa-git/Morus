// <auto-generated />
using System;
using Infraestructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(ContextBase))]
    partial class ContextBaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Limite")
                        .HasColumnType("int")
                        .HasColumnName("Limite");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("AreaComum");
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Classificacao");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataUpload");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("TamanhoArquivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TamanhoArquivo");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("Domain.Entities.Condominio", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CEP");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Cidade");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<bool>("Porteiro")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Porteiro");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Rua");

                    b.HasKey("Id");

                    b.ToTable("Condominio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Bairro Morus",
                            CEP = "29101000",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Morus",
                            Numero = 1,
                            Porteiro = false,
                            Rua = "Rua Morus"
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "Bairro",
                            CEP = "29101001",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Dois",
                            Numero = 2,
                            Porteiro = false,
                            Rua = "Rua Dois"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("Informacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataAlteracao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastro = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descrição de informação inicial teste, lorem ipsum",
                            Id_condominio = 1,
                            Titulo = "Informação inicial"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Categoria");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTransacao");

                    b.Property<string>("DescricaoTransacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DescricaoTransacao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NumeroConta");

                    b.Property<string>("Torre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.Property<decimal>("ValorTransacao")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTransacao");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("LivroCaixa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "teste",
                            DataTransacao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescricaoTransacao = "Descrição teste",
                            IdCondominio = 1,
                            NumeroConta = "123",
                            Torre = "A",
                            ValorTransacao = 500.00m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Titulo");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AplicadaEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AplicadaEm");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<int>("Id_usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Motivo");

                    b.Property<double>("TaxaJurosDia")
                        .HasColumnType("double")
                        .HasColumnName("TaxaJurosDia");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorMulta");

                    b.HasKey("Id");

                    b.HasIndex("Id_usuario");

                    b.ToTable("Multa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AplicadaEm = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataExpiracao = new DateTime(2023, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_usuario = 2,
                            Motivo = "Jogou ovo da janela",
                            TaxaJurosDia = 1.0,
                            ValorMulta = 280.75m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_ocorrencia");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int?>("Id_usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("Resolvido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Resolvido");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("Id_usuario");

                    b.ToTable("Ocorrencia");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataReserva");

                    b.Property<int>("Id_AreaComum")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("Id_AreaComum");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Recorrente");

                    b.Property<double>("Valor")
                        .HasColumnType("double")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("TaxaMensal");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cf3bc094-512e-47cb-95ea-865b22f009e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5e64431-5d43-4aab-8e60-6a5c22384ec1",
                            Email = "sindico@sindico.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICO@SINDICO.COM.BR",
                            NormalizedUserName = "SINDICO@SINDICO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHkHyeO24SS1YRKRT5qiRkJczj36+5tVXHQ7moNV2hD4yAWDywAv6MuSCe6vMWWQag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "848d331b-3ac9-4f47-858e-ac2ed4d58c82",
                            TwoFactorEnabled = false,
                            UserName = "sindico@sindico.com.br"
                        },
                        new
                        {
                            Id = "453ade39-dfd6-4fc8-9fc9-dcf87934b2bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4461a1d-4997-41bc-98ce-3e8dcb32f268",
                            Email = "sindicoDois@sindicoDois.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICODOIS@SINDICODOIS.COM.BR",
                            NormalizedUserName = "SINDICODOIS@SINDICODOIS.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxnAIDMn8tbQahi/xCp7KScJbA7QDUMokRTwbGEAIo3vJun/R2m74WVHrQ7ZD+5JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f00ae81-a65f-4122-8e21-e29bf97e1ef5",
                            TwoFactorEnabled = false,
                            UserName = "sindicoDois@sindicoDois.com.br"
                        },
                        new
                        {
                            Id = "b0b0a636-7d0e-4280-a5b9-f689e9d6a3d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb6bc591-656c-46d5-9ee0-6c92073714e1",
                            Email = "morador@morador.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MORADOR@MORADOR.COM.BR",
                            NormalizedUserName = "MORADOR@MORADOR.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEA06JQUNVLmfejqOfPepHxrTKeSE0/kruoPzCAccnV5iHEsaBPFDT+Lrfe3U3F8hIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a64737ce-886d-4388-ae2f-fca3396c18ec",
                            TwoFactorEnabled = false,
                            UserName = "morador@morador.com.br"
                        },
                        new
                        {
                            Id = "eae32922-39c4-4c50-af04-d12d5be6a5eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79050a08-452b-42bd-a403-08e860d6fe7f",
                            Email = "admin@admin.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM.BR",
                            NormalizedUserName = "ADMIN@ADMIN.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEH4EgjWuPi8xfUt4EgVj1TjDGsisMEXTT5zmNm5Y8GQwa61L/ehPRIqPuOqQQqrWpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79316144-450f-4e2a-8dd1-55713d42e897",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com.br"
                        },
                        new
                        {
                            Id = "5cbe0b1a-b35f-4e97-af18-01058c48ddea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d8a858d-3c7d-4906-b90c-8555141fe329",
                            Email = "porteiro@porteiro.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTEIRO@PORTEIRO.COM.BR",
                            NormalizedUserName = "PORTEIRO@PORTEIRO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEH6AK56qo42b6EykKU9ZpqChYIFEh0feE2zMlFagiDW0dEOOBG967FdZ0+Zhyyt0sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e69cd080-cb8a-492a-a553-61b613430372",
                            TwoFactorEnabled = false,
                            UserName = "porteiro@porteiro.com.br"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int?>("Apartamento")
                        .HasColumnType("int")
                        .HasColumnName("Apartamento");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CPF");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("IdUserIdentity")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<string>("Torre")
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.HasKey("Id");

                    b.HasIndex("IdUserIdentity");

                    b.HasIndex("Id_condominio");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apartamento = 1,
                            CPF = "12345678999",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUserIdentity = "cf3bc094-512e-47cb-95ea-865b22f009e7",
                            Id_condominio = 1,
                            Nome = "Sindico da Costa Filho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 2,
                            Apartamento = 2,
                            CPF = "12343223444",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUserIdentity = "b0b0a636-7d0e-4280-a5b9-f689e9d6a3d6",
                            Id_condominio = 1,
                            Nome = "Morador de Carvalho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 3,
                            Apartamento = 3,
                            CPF = "12343223445",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUserIdentity = "5cbe0b1a-b35f-4e97-af18-01058c48ddea",
                            Id_condominio = 1,
                            Nome = "Porteiro Fernandes",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 4,
                            Apartamento = 3,
                            CPF = "12343223456",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUserIdentity = "eae32922-39c4-4c50-af04-d12d5be6a5eb",
                            Id_condominio = 1,
                            Nome = "Administrador",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 5,
                            Apartamento = 4,
                            CPF = "12343223336",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUserIdentity = "453ade39-dfd6-4fc8-9fc9-dcf87934b2bd",
                            Id_condominio = 2,
                            Nome = "Sindico Dois",
                            Torre = "A"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativa");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCriacao");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Tema");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Votacao");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("IdVotacao")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool?>("ValorVoto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("IdVotacao");

                    b.ToTable("Voto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b90d0ce-6825-4b93-bd4e-68d85311a415",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1d607355-8667-4ae1-8d87-575c322d6c30",
                            ConcurrencyStamp = "2",
                            Name = "Sindico",
                            NormalizedName = "SINDICO"
                        },
                        new
                        {
                            Id = "6d853629-a22b-4dd2-9546-8662b6d6b679",
                            ConcurrencyStamp = "3",
                            Name = "Morador",
                            NormalizedName = "MORADOR"
                        },
                        new
                        {
                            Id = "23d04413-e182-4769-826b-8261004d57e1",
                            ConcurrencyStamp = "4",
                            Name = "Porteiro",
                            NormalizedName = "PORTEIRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cf3bc094-512e-47cb-95ea-865b22f009e7",
                            RoleId = "1d607355-8667-4ae1-8d87-575c322d6c30"
                        },
                        new
                        {
                            UserId = "453ade39-dfd6-4fc8-9fc9-dcf87934b2bd",
                            RoleId = "1d607355-8667-4ae1-8d87-575c322d6c30"
                        },
                        new
                        {
                            UserId = "eae32922-39c4-4c50-af04-d12d5be6a5eb",
                            RoleId = "4b90d0ce-6825-4b93-bd4e-68d85311a415"
                        },
                        new
                        {
                            UserId = "b0b0a636-7d0e-4280-a5b9-f689e9d6a3d6",
                            RoleId = "6d853629-a22b-4dd2-9546-8662b6d6b679"
                        },
                        new
                        {
                            UserId = "5cbe0b1a-b35f-4e97-af18-01058c48ddea",
                            RoleId = "23d04413-e182-4769-826b-8261004d57e1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.HasOne("Domain.Entities.AreaComum", "AreaComum")
                        .WithMany()
                        .HasForeignKey("Id_AreaComum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaComum");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUserIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Votacao", "Votacao")
                        .WithMany()
                        .HasForeignKey("IdVotacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Votacao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

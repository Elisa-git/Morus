// <auto-generated />
using System;
using Infraestructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20231027001230_inicial")]
    partial class inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Limite")
                        .HasColumnType("int")
                        .HasColumnName("Limite");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("AreaComum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Id_condominio = 1,
                            Limite = 30,
                            Nome = "Churrasqueira"
                        },
                        new
                        {
                            Id = 2,
                            Id_condominio = 1,
                            Limite = 70,
                            Nome = "Salão de Festas"
                        },
                        new
                        {
                            Id = 3,
                            Id_condominio = 1,
                            Limite = 15,
                            Nome = "Quadra poliesportiva"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Classificacao");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataUpload");

                    b.Property<byte[]>("Documento")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("Documento");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<long>("TamanhoArquivo")
                        .HasColumnType("bigint")
                        .HasColumnName("TamanhoArquivo");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("Domain.Entities.Condominio", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CEP");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Cidade");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<bool>("Porteiro")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Porteiro");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Rua");

                    b.HasKey("Id");

                    b.ToTable("Condominio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Bairro Morus",
                            CEP = "29101000",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Morus",
                            Numero = 1,
                            Porteiro = false,
                            Rua = "Rua Morus"
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "Bairro",
                            CEP = "29101001",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Dois",
                            Numero = 2,
                            Porteiro = false,
                            Rua = "Rua Dois"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Informacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataAlteracao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastro = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descrição de informação inicial teste, lorem ipsum",
                            IdCondominio = 1,
                            Titulo = "Informação inicial"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Categoria");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTransacao");

                    b.Property<string>("DescricaoTransacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DescricaoTransacao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("TipoTransacao")
                        .HasColumnType("int")
                        .HasColumnName("TipoTransacao");

                    b.Property<string>("Torre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.Property<decimal>("ValorTransacao")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTransacao");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("LivroCaixa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "teste",
                            DataTransacao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescricaoTransacao = "Descrição teste",
                            IdCondominio = 1,
                            TipoTransacao = 0,
                            Torre = "A",
                            ValorTransacao = 500.00m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Titulo");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AplicadaEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AplicadaEm");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<int>("Id_usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Motivo");

                    b.Property<double>("TaxaJurosDia")
                        .HasColumnType("double")
                        .HasColumnName("TaxaJurosDia");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorMulta");

                    b.HasKey("Id");

                    b.HasIndex("Id_usuario");

                    b.ToTable("Multa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AplicadaEm = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataExpiracao = new DateTime(2023, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_usuario = 2,
                            Motivo = "Jogou ovo da janela",
                            TaxaJurosDia = 1.0,
                            ValorMulta = 280.75m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_ocorrencia");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("Resolvido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Resolvido");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ocorrencia");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataReserva");

                    b.Property<int>("Id_AreaComum")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("Id_AreaComum");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Recorrente");

                    b.Property<double>("Valor")
                        .HasColumnType("double")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("TaxaMensal");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ed90aa62-5abe-4cf6-8ccc-88fa05444982",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be83c0ad-3e9e-4909-a09a-f095b300632c",
                            Email = "sindico@sindico.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICO@SINDICO.COM.BR",
                            NormalizedUserName = "SINDICO@SINDICO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEOZJtb4SfAZl0yf2U3em6n1c259zlXhzJT1KKfFb6V8If8vJwk62AbxceF+SO/fOFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e918020e-a1e2-4a43-bfe2-3f6553fc6eaf",
                            TwoFactorEnabled = false,
                            UserName = "sindico@sindico.com.br"
                        },
                        new
                        {
                            Id = "3101ff70-eefb-4653-a504-45b98aa035dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01c9f9fe-e586-4b6a-a7eb-77ee985b841f",
                            Email = "sindicoDois@sindicoDois.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICODOIS@SINDICODOIS.COM.BR",
                            NormalizedUserName = "SINDICODOIS@SINDICODOIS.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeepd6IUVTrdm72UHyKhk2A8ARVBjNE46pjtVXZesIAXOqvVVQ2B7bwp51mFbsmqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d36224d2-bc77-49e4-9872-71ca64815c26",
                            TwoFactorEnabled = false,
                            UserName = "sindicoDois@sindicoDois.com.br"
                        },
                        new
                        {
                            Id = "55459e64-8d09-49b8-8b93-5ea267e1aa21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "348d4e51-a2a6-4cf4-8646-47ebd87b68df",
                            Email = "morador@morador.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MORADOR@MORADOR.COM.BR",
                            NormalizedUserName = "MORADOR@MORADOR.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKAo1Bdwfo4RFhSsFBzZ4mQ52P8UQhQAOdOoRnzLs/1zOSnE3whOzjoDHOW99NGstQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f83ccf4b-f002-4512-ade2-41008855e5ef",
                            TwoFactorEnabled = false,
                            UserName = "morador@morador.com.br"
                        },
                        new
                        {
                            Id = "d5385e9f-8a02-4960-ad27-c05abb5f53b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6fc3ddd-f5fc-4f5e-a340-d6ce48c8d1a4",
                            Email = "admin@admin.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM.BR",
                            NormalizedUserName = "ADMIN@ADMIN.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqhwpqmvLlMD+p8QXu7q57qnTghVDTlkp7TywlaPibpCYQDFkhKPj8qO7YQXXIP9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffdff1f3-bfb5-4b44-8991-1b8af949e0ff",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com.br"
                        },
                        new
                        {
                            Id = "af3ae2a0-8726-42ca-81b3-806b1cd1421e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2eeb7b1-d002-4fb0-8ce7-a52bf448340b",
                            Email = "porteiro@porteiro.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTEIRO@PORTEIRO.COM.BR",
                            NormalizedUserName = "PORTEIRO@PORTEIRO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAELBr7WU+SWGCJqGqIMrzODZRMsznJIENgJE67gKOLSMFEqihR55YU852jacPECN/0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "378d6942-d07f-4274-88da-cc3c46b44d62",
                            TwoFactorEnabled = false,
                            UserName = "porteiro@porteiro.com.br"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int?>("Apartamento")
                        .HasColumnType("int")
                        .HasColumnName("Apartamento");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CPF");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataNascimento");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("IdUserIdentity")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<string>("Torre")
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.HasIndex("IdUserIdentity");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apartamento = 1,
                            CPF = "12345678999",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "ed90aa62-5abe-4cf6-8ccc-88fa05444982",
                            Nome = "Sindico da Costa Filho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 2,
                            Apartamento = 2,
                            CPF = "12343223444",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "55459e64-8d09-49b8-8b93-5ea267e1aa21",
                            Nome = "Morador de Carvalho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 3,
                            Apartamento = 3,
                            CPF = "12343223445",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "af3ae2a0-8726-42ca-81b3-806b1cd1421e",
                            Nome = "Porteiro Fernandes",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 4,
                            Apartamento = 3,
                            CPF = "12343223456",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "d5385e9f-8a02-4960-ad27-c05abb5f53b0",
                            Nome = "Administrador",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 5,
                            Apartamento = 4,
                            CPF = "12343223336",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 2,
                            IdUserIdentity = "3101ff70-eefb-4653-a504-45b98aa035dc",
                            Nome = "Sindico Dois",
                            Torre = "A"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativa");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCriacao");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Tema");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Votacao");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("IdVotacao")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool?>("ValorVoto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("IdVotacao");

                    b.ToTable("Voto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "468a170e-ffed-4bd0-8a9d-049d3c522aef",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "48429b05-4a93-4523-9d1c-891ed16c02a2",
                            ConcurrencyStamp = "2",
                            Name = "Sindico",
                            NormalizedName = "SINDICO"
                        },
                        new
                        {
                            Id = "4cd5670b-9909-470d-9ab1-884f3b0f5976",
                            ConcurrencyStamp = "3",
                            Name = "Morador",
                            NormalizedName = "MORADOR"
                        },
                        new
                        {
                            Id = "02bd858e-0414-4aa0-b67c-054929ad13c5",
                            ConcurrencyStamp = "4",
                            Name = "Porteiro",
                            NormalizedName = "PORTEIRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ed90aa62-5abe-4cf6-8ccc-88fa05444982",
                            RoleId = "48429b05-4a93-4523-9d1c-891ed16c02a2"
                        },
                        new
                        {
                            UserId = "3101ff70-eefb-4653-a504-45b98aa035dc",
                            RoleId = "48429b05-4a93-4523-9d1c-891ed16c02a2"
                        },
                        new
                        {
                            UserId = "d5385e9f-8a02-4960-ad27-c05abb5f53b0",
                            RoleId = "468a170e-ffed-4bd0-8a9d-049d3c522aef"
                        },
                        new
                        {
                            UserId = "55459e64-8d09-49b8-8b93-5ea267e1aa21",
                            RoleId = "4cd5670b-9909-470d-9ab1-884f3b0f5976"
                        },
                        new
                        {
                            UserId = "af3ae2a0-8726-42ca-81b3-806b1cd1421e",
                            RoleId = "02bd858e-0414-4aa0-b67c-054929ad13c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.HasOne("Domain.Entities.AreaComum", "AreaComum")
                        .WithMany()
                        .HasForeignKey("Id_AreaComum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaComum");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUserIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Votacao", "Votacao")
                        .WithMany()
                        .HasForeignKey("IdVotacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Votacao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

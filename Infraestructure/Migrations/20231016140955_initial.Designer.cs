// <auto-generated />
using System;
using Infraestructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20231016140955_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Limite")
                        .HasColumnType("int")
                        .HasColumnName("Limite");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("AreaComum");
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Classificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Classificacao");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataUpload");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("TamanhoArquivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TamanhoArquivo");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("Domain.Entities.Condominio", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CEP");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Cidade");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<bool>("Porteiro")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Porteiro");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Rua");

                    b.HasKey("Id");

                    b.ToTable("Condominio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Bairro Morus",
                            CEP = "29101000",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Morus",
                            Numero = 1,
                            Porteiro = false,
                            Rua = "Rua Morus"
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "Bairro",
                            CEP = "29101001",
                            Cidade = "Vila Velha",
                            Estado = "ES",
                            Nome = "Condominio Dois",
                            Numero = 2,
                            Porteiro = false,
                            Rua = "Rua Dois"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Informacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataAlteracao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastro = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descrição de informação inicial teste, lorem ipsum",
                            IdCondominio = 1,
                            Titulo = "Informação inicial"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Categoria");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataTransacao");

                    b.Property<string>("DescricaoTransacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DescricaoTransacao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("TipoTransacao")
                        .HasColumnType("int")
                        .HasColumnName("TipoTransacao");

                    b.Property<string>("Torre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.Property<decimal>("ValorTransacao")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorTransacao");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("LivroCaixa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "teste",
                            DataTransacao = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescricaoTransacao = "Descrição teste",
                            IdCondominio = 1,
                            TipoTransacao = 0,
                            Torre = "A",
                            ValorTransacao = 500.00m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Titulo");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AplicadaEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AplicadaEm");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<int>("Id_usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Motivo");

                    b.Property<double>("TaxaJurosDia")
                        .HasColumnType("double")
                        .HasColumnName("TaxaJurosDia");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorMulta");

                    b.HasKey("Id");

                    b.HasIndex("Id_usuario");

                    b.ToTable("Multa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AplicadaEm = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataExpiracao = new DateTime(2023, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_usuario = 2,
                            Motivo = "Jogou ovo da janela",
                            TaxaJurosDia = 1.0,
                            ValorMulta = 280.75m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_ocorrencia");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("Resolvido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Resolvido");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Ocorrencia");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataAlteracao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCadastro");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataReserva");

                    b.Property<int>("Id_AreaComum")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("Id_AreaComum");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("Id_condominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Recorrente");

                    b.Property<double>("Valor")
                        .HasColumnType("double")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("Id_condominio");

                    b.ToTable("TaxaMensal");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0c418fba-a7b5-4de9-9d18-51cd37607afa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "550fff57-dca8-417b-8bfe-6a35f6b8917c",
                            Email = "sindico@sindico.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICO@SINDICO.COM.BR",
                            NormalizedUserName = "SINDICO@SINDICO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEOi7pea3fPIklb2yGvQB3ZrSwaA8oeyuz3SsYUZ+QUgeRhw6KBzoYESTzcQWvaYE/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49724437-c9bb-4f03-b408-08c20c5d45a4",
                            TwoFactorEnabled = false,
                            UserName = "sindico@sindico.com.br"
                        },
                        new
                        {
                            Id = "3b896fcd-6417-41ad-8a33-df872b805e0f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "716d891d-e66e-4db4-afbd-8441c977c325",
                            Email = "sindicoDois@sindicoDois.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINDICODOIS@SINDICODOIS.COM.BR",
                            NormalizedUserName = "SINDICODOIS@SINDICODOIS.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEBo2J13dOysnp6oAY57QGL1aj2Bo6tnw2Dls5oEKft7+auyBLLiIOVz5MTfFiGAEIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "585f21b0-244f-4395-afd7-77e7ef271acb",
                            TwoFactorEnabled = false,
                            UserName = "sindicoDois@sindicoDois.com.br"
                        },
                        new
                        {
                            Id = "9410da37-b9b6-4aa5-9312-bbb6b3c30b6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b1775de-f5f5-44f8-8c9e-d65ce2f01757",
                            Email = "morador@morador.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MORADOR@MORADOR.COM.BR",
                            NormalizedUserName = "MORADOR@MORADOR.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEK1X6nO9wWPeU52oBMxoW5IEg1MfM8PDK7szFC9iQyD3jNodjFDz5fLKLKDULqvSUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbcb5abb-ff53-470d-b35a-7b5e8062df93",
                            TwoFactorEnabled = false,
                            UserName = "morador@morador.com.br"
                        },
                        new
                        {
                            Id = "05f525a7-8ebc-445b-bf51-7474fdfb8370",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7fbf4bb-38a7-4109-892f-b31d48a2bf31",
                            Email = "admin@admin.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM.BR",
                            NormalizedUserName = "ADMIN@ADMIN.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEP2kJbe9/MdZHDwfMUq1kBk9Ul+9unSywsDFOwYTyiJ5Hkt2ivLBt6u+xSv3aB6HNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45236a7b-3133-4997-95df-7102c2025463",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com.br"
                        },
                        new
                        {
                            Id = "e5716577-2ace-4bca-8a7a-0cf3ed6c0af6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a5d44e1-0ae2-4457-b6e0-2e855072386c",
                            Email = "porteiro@porteiro.com.br",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTEIRO@PORTEIRO.COM.BR",
                            NormalizedUserName = "PORTEIRO@PORTEIRO.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHezVpAoC56dVAQp/qH+bc8tBY4K+rWRe5QAcEF5tPWhCI1bc30QnEBuWVVTInEwDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ccf46fa-f4f6-429c-b663-f125390d0961",
                            TwoFactorEnabled = false,
                            UserName = "porteiro@porteiro.com.br"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int?>("Apartamento")
                        .HasColumnType("int")
                        .HasColumnName("Apartamento");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CPF");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataNascimento");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("IdUserIdentity")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("Nome");

                    b.Property<string>("Torre")
                        .HasColumnType("longtext")
                        .HasColumnName("Torre");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.HasIndex("IdUserIdentity");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apartamento = 1,
                            CPF = "12345678999",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "0c418fba-a7b5-4de9-9d18-51cd37607afa",
                            Nome = "Sindico da Costa Filho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 2,
                            Apartamento = 2,
                            CPF = "12343223444",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "9410da37-b9b6-4aa5-9312-bbb6b3c30b6f",
                            Nome = "Morador de Carvalho",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 3,
                            Apartamento = 3,
                            CPF = "12343223445",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "e5716577-2ace-4bca-8a7a-0cf3ed6c0af6",
                            Nome = "Porteiro Fernandes",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 4,
                            Apartamento = 3,
                            CPF = "12343223456",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 1,
                            IdUserIdentity = "05f525a7-8ebc-445b-bf51-7474fdfb8370",
                            Nome = "Administrador",
                            Torre = "A"
                        },
                        new
                        {
                            Id = 5,
                            Apartamento = 4,
                            CPF = "12343223336",
                            DataNascimento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCondominio = 2,
                            IdUserIdentity = "3b896fcd-6417-41ad-8a33-df872b805e0f",
                            Nome = "Sindico Dois",
                            Torre = "A"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativa")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Ativa");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataCriacao");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DataExpiracao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Descricao");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Tema");

                    b.HasKey("Id");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Votacao");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("IdVotacao")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool?>("ValorVoto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("IdVotacao");

                    b.ToTable("Voto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "840ca5b9-e6ac-4835-a0ce-8fff2fe583bd",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "63604a83-4c2d-46ef-941f-47af31447dbb",
                            ConcurrencyStamp = "2",
                            Name = "Sindico",
                            NormalizedName = "SINDICO"
                        },
                        new
                        {
                            Id = "af84c261-27ea-43bb-9e99-7197bb998c73",
                            ConcurrencyStamp = "3",
                            Name = "Morador",
                            NormalizedName = "MORADOR"
                        },
                        new
                        {
                            Id = "400ffd9b-f776-41f3-b7de-feeaf6feed80",
                            ConcurrencyStamp = "4",
                            Name = "Porteiro",
                            NormalizedName = "PORTEIRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0c418fba-a7b5-4de9-9d18-51cd37607afa",
                            RoleId = "63604a83-4c2d-46ef-941f-47af31447dbb"
                        },
                        new
                        {
                            UserId = "3b896fcd-6417-41ad-8a33-df872b805e0f",
                            RoleId = "63604a83-4c2d-46ef-941f-47af31447dbb"
                        },
                        new
                        {
                            UserId = "05f525a7-8ebc-445b-bf51-7474fdfb8370",
                            RoleId = "840ca5b9-e6ac-4835-a0ce-8fff2fe583bd"
                        },
                        new
                        {
                            UserId = "9410da37-b9b6-4aa5-9312-bbb6b3c30b6f",
                            RoleId = "af84c261-27ea-43bb-9e99-7197bb998c73"
                        },
                        new
                        {
                            UserId = "e5716577-2ace-4bca-8a7a-0cf3ed6c0af6",
                            RoleId = "400ffd9b-f776-41f3-b7de-feeaf6feed80"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AreaComum", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Arquivo", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Informacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.LivroCaixa", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Multa", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Ocorrencia", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Reserva", b =>
                {
                    b.HasOne("Domain.Entities.AreaComum", "AreaComum")
                        .WithMany()
                        .HasForeignKey("Id_AreaComum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaComum");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.TaxaMensal", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("Id_condominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUserIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Votacao", b =>
                {
                    b.HasOne("Domain.Entities.Condominio", "Condominio")
                        .WithMany()
                        .HasForeignKey("IdCondominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Domain.Entities.Voto", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Votacao", "Votacao")
                        .WithMany()
                        .HasForeignKey("IdVotacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Votacao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
